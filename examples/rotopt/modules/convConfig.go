package modules

import "fmt"

// ///////////////////////////////////////////////////////////////////////////////////////////////////////
// Referred to APPENDIX A and B.
// blueprints is integrated BP of CrossCombineBP and RotationSumBP. (for readability).
// All of these blueprints make correct result, but not all of them is the optimal solution.
// ///////////////////////////////////////////////////////////////////////////////////////////////////////
func GetConvBlueprints(convID string, depth int) ([][]int, int, []int) {
	var blueprints [][]int
	var q int //length of kernel_map
	var rotIndex3by3Kernel []int

	if convID == "CONV1" { //32*32*3 -> 32*32*16, kernel=3*3, k=1
		//CONV1
		//=================Choose MAP=================//
		if depth == 2 {
			blueprints = [][]int{
				{4}, //tree length
				{0, 2048},
				{2, 2, 1024},
				{3, 2, 14336},
				{0, -16384},
			}

		} else {
			fmt.Printf("RotOptConv : Invalid parameter! convID(%s), depth(%v)", convID, depth)
		}

		//============================================//
		q = 2
		rotIndex3by3Kernel = []int{-33, -32, -31, -1, 0, 1, 31, 32, 33}

		//========================================================================================//
	} else if convID == "CONV2" { //32*32*16 -> 32*32*16, kernel=3*3, k=1
		//CONV2
		//=================Choose MAP=================//
		if depth == 2 {
			blueprints = [][]int{
				{3},
				{2, 8, 1024, 2048, 4096},
				{3, 4, 8192, 8192, 16384},
				{0, -16384},
			}
			// blueprints = [][]int{
			// 	{4},
			// 	{0, 8192},
			// 	{2, 8, 1024, 2048, 4096},
			// 	{3, 2, 8192},
			// 	{0, -16384},
			// }
		} else if depth == 3 {
			blueprints = [][]int{
				{4},
				{1, 2, 1024},       //q*1
				{2, 4, 2048, 4096}, //(q/2)*2
				{3, 4, 8192, 8192, 16384},
				{0, -16384},
			}
			// blueprints = [][]int{
			// 	{4},
			// 	{1, 4, 1024, 2048},
			// 	{2, 2, 4096},
			// 	{3, 4, 8192, 8192, 16384},
			// 	{0, -16384},
			// }
			// blueprints = [][]int{
			// 	{5},
			// 	{1, 2, 1024},
			// 	{0, 8192},
			// 	{2, 4, 2048, 4096},
			// 	{3, 2, 8192},
			// 	{0, -16384},
			// }
			// blueprints = [][]int{
			// 	{5},
			// 	{1, 4, 1024, 2048},
			// 	{0, 8192},
			// 	{2, 2, 4096},
			// 	{3, 2, 8192},
			// 	{0, -16384},
			// }
		} else if depth == 4 {
			blueprints = [][]int{
				{5},
				{1, 2, 1024}, //q*1
				{1, 2, 2048}, //(q/2)*1
				{2, 2, 4096}, //(q/4)*1
				{3, 4, 8192, 8192, 16384},
				{0, -16384},
			}
			// blueprints = [][]int{
			// 	{6},
			// 	{1, 2, 1024},
			// 	{1, 2, 2048},
			// 	{0, 8192},
			// 	{2, 2, 4096},
			// 	{3, 2, 8192},
			// 	{0, -16384},
			// }
		} else {
			fmt.Printf("RotOptConv : Invalid parameter! convID(%s), depth(%v)", convID, depth)
		}

		//============================================//
		q = 8
		rotIndex3by3Kernel = []int{-33, -32, -31, -1, 0, 1, 31, 32, 33}

		//========================================================================================//
	} else if convID == "CONV3s2" { //32*32*16 -> 16*16*32, kernel=3*3, k=1->2
		//CONV3s2
		//=================Choose MAP=================//
		if depth == 2 {
			blueprints = [][]int{
				{4},
				{2, 16, 1024, 2048, 4096, 8192},
				{3, 4, 8192 - 1, 16384 - 32, 16384 + 8192 - 32 - 1},
				{0, -8192},
				{0, -16384},
			}
		} else if depth == 3 {
			blueprints = [][]int{
				{5},
				{1, 4, 1024, 2048}, //q*2
				{2, 4, 4096, 8192}, //(q/4)*2
				{3, 4, 8192 - 1, 16384 - 32, 16384 + 8192 - 32 - 1},
				{0, -8192},
				{0, -16384},
			}
			// blueprints = [][]int{
			// 	{5},
			// 	{1, 2, 1024},
			// 	{2, 8, 2048, 4096, 8192},
			// 	{3, 4, 8192 - 1, 16384 - 32, 16384 + 8192 - 32 - 1},
			// 	{0, -8192},
			// 	{0, -16384},
			// }
			// blueprints = [][]int{
			// 	{5},
			// 	{1, 8, 1024, 2048, 4096},
			// 	{2, 2, 8192},
			// 	{3, 4, 8192 - 1, 16384 - 32, 16384 + 8192 - 32 - 1},
			// 	{0, -8192},
			// 	{0, -16384},
			// }
		} else if depth == 4 {
			blueprints = [][]int{
				{6},
				{1, 2, 1024},
				{1, 2, 2048},
				{2, 4, 4096, 8192},
				{3, 4, 8192 - 1, 16384 - 32, 16384 + 8192 - 32 - 1},
				{0, -8192},
				{0, -16384},
			}
			// blueprints = [][]int{
			// 	{6},
			// 	{1, 4, 1024, 2048},
			// 	{1, 2, 4096},
			// 	{2, 2, 8192},
			// 	{3, 4, 8192 - 1, 16384 - 32, 16384 + 8192 - 32 - 1},
			// 	{0, -8192},
			// 	{0, -16384},
			// }
		} else if depth == 5 {
			//5 depth, 43 rotation,
			blueprints = [][]int{
				{7},
				{1, 2, 1024},
				{1, 2, 2048},
				{1, 2, 4096},
				{2, 2, 8192},
				{3, 4, 8192 - 1, 16384 - 32, 16384 + 8192 - 32 - 1},
				{0, -8192},
				{0, -16384},
			}
		} else {
			fmt.Printf("RotOptConv : Invalid parameter! convID(%s), depth(%v)", convID, depth)

		}

		//============================================//
		q = 16
		rotIndex3by3Kernel = []int{-33, -32, -31, -1, 0, 1, 31, 32, 33}

		//========================================================================================//
	} else if convID == "CONV3" { //16*16*32 -> 16*16*32, kernel=3*3, k=2
		//CONV3
		//=================Choose MAP=================//
		if depth == 2 {
			blueprints = [][]int{
				{5},
				{0, 2048},           //q
				{2, 8, 1, 32, 1024}, //q*3
				{3, 8, 4096, 4096*2 - 2048, 4096*3 - 2048, 4096*4 - 4096, 4096*5 - 4096, 4096*6 - 6144, 4096*7 - 6144}, // 이렇게 하면9167 ms, 10254 ms {3,16,2048,4096,6144,8192-2048,8192,8192+2048,8192+4096,16384-4096,16384-2048,16384,16384+2048,16384+2048,16384+4096,16384+6144,16384+8192},
				{0, -8192},
				{0, -16384},
			}
			// blueprints = [][]int{
			// 	{6},
			// 	{0, 2048},
			// 	{0, 4096},
			// 	{2, 8, 1, 32, 1024},
			// 	{3, 4, 8192 - 2048, 16384 - 4096, 16384 + 2048},
			// 	{0, -8192},
			// 	{0, -16384},
			// }
		} else if depth == 3 {
			//3 depth, 35 rotations
			blueprints = [][]int{
				{7},
				{1, 4, 1, 32}, //q*2
				{0, 2048},     //(q/4)
				{0, 4096},     //(q/4)
				{2, 2, 1024},  //(q/4)*1
				{3, 4, 8192 - 2048, 16384 - 4096, 16384 + 2048},
				{0, -8192},
				{0, -16384},
			}
			// blueprints = [][]int{
			// 	{7},
			// 	{1, 2, 1},
			// 	{0, 2048},
			// 	{0, 4096},
			// 	{2, 4, 32, 1024},
			// 	{3, 4, 8192 - 2048, 16384 - 4096, 16384 + 2048},
			// 	{0, -8192},
			// 	{0, -16384},
			// }
			// blueprints = [][]int{
			// 	{5},
			// 	{1, 2, 1},
			// 	{0, 2048},
			// 	{2, 4, 32, 1024},
			// 	{3, 8, 4096, 4096*2 - 2048, 4096*3 - 2048, 4096*4 - 4096, 4096*5 - 4096, 4096*6 - 6144, 4096*7 - 6144}, // 이렇게 하면9167 ms, 10254 ms {3,16,2048,4096,6144,8192-2048,8192,8192+2048,8192+4096,16384-4096,16384-2048,16384,16384+2048,16384+2048,16384+4096,16384+6144,16384+8192},
			// 	{0, -8192},
			// 	{0, -16384},
			// }
			// blueprints = [][]int{
			// 	{5},
			// 	{1, 4, 1, 32},
			// 	{0, 2048},
			// 	{2, 2, 1024},
			// 	{3, 8, 4096, 4096*2 - 2048, 4096*3 - 2048, 4096*4 - 4096, 4096*5 - 4096, 4096*6 - 6144, 4096*7 - 6144}, // 이렇게 하면9167 ms, 10254 ms {3,16,2048,4096,6144,8192-2048,8192,8192+2048,8192+4096,16384-4096,16384-2048,16384,16384+2048,16384+2048,16384+4096,16384+6144,16384+8192},
			// 	{0, -8192},
			// 	{0, -16384},
			// }
		} else if depth == 4 {
			blueprints = [][]int{
				{8},
				{1, 2, 1},    // q
				{1, 2, 32},   //(q/2)
				{0, 2048},    //(q/4)
				{0, 4096},    //(q/4)
				{2, 2, 1024}, //(q/4)*1
				{3, 4, 8192 - 2048, 16384 - 4096, 16384 + 2048},
				{0, -8192},
				{0, -16384},
			}
		} else {
			fmt.Printf("RotOptConv : Invalid parameter! convID(%s), depth(%v)", convID, depth)

		}

		//============================================//
		q = 8
		rotIndex3by3Kernel = []int{-66, -64, -62, -2, 0, 2, 62, 64, 66}

		//========================================================================================//
	} else if convID == "CONV4s2" { //16*16*32 -> 8*8*64, kernel=3*3, k=2->4
		//CONV4s2
		//=================Choose MAP=================//
		if depth == 2 {
			blueprints = [][]int{
				{5},
				{2, 16, 1, 32, 1024, 2048},
				{3, 8, 4096, 8192 - 2, 8192 - 2 + 4096, 16384 - 32 - 32, 16384 - 32 - 32 + 4096, 16384 + 8192 - 32 - 32 - 2, 16384 + 8192 - 32 - 32 - 2 + 4096},
				{0, -4096},
				{0, -8192},
				{0, -16384},
			}
			// blueprints = [][]int{
			// 	{5},
			// 	{0, 4096},
			// 	{2, 16, 1, 32, 1024, 2048},
			// 	{3, 4, 8192 - 2, 16384 - 32 - 32, 16384 + 8192 - 32 - 32 - 2},
			// 	{0, -4096},
			// 	{0, -8192},
			// 	{0, -16384},
			// }
		} else if depth == 3 {
			//3 depth, 58 rotation
			// blueprints = [][]int{
			// 	{7},
			// 	{1, 4, 1, 32},
			// 	{0, 4096},
			// 	{2, 4, 1024, 2048},
			// 	{3, 4, 8192 - 2, 16384 - 32 - 32, 16384 + 8192 - 32 - 32 - 2},
			// 	{0, -4096},
			// 	{0, -8192},
			// 	{0, -16384},
			// }
			// blueprints = [][]int{
			// 	{7},
			// 	{1, 2, 1},
			// 	{0, 4096},
			// 	{2, 8, 32, 1024, 2048},
			// 	{3, 4, 8192 - 2, 16384 - 32 - 32, 16384 + 8192 - 32 - 32 - 2},
			// 	{0, -4096},
			// 	{0, -8192},
			// 	{0, -16384},
			// }
			// blueprints = [][]int{
			// 	{7},
			// 	{1, 8, 1, 32, 1024},
			// 	{0, 4096},
			// 	{2, 2, 2048},
			// 	{3, 4, 8192 - 2, 16384 - 32 - 32, 16384 + 8192 - 32 - 32 - 2},
			// 	{0, -4096},
			// 	{0, -8192},
			// 	{0, -16384},
			// }
			blueprints = [][]int{
				{5},
				{1, 2, 1},
				{2, 8, 32, 1024, 2048},
				{3, 8, 4096, 8192 - 2, 8192 - 2 + 4096, 16384 - 32 - 32, 16384 - 32 - 32 + 4096, 16384 + 8192 - 32 - 32 - 2, 16384 + 8192 - 32 - 32 - 2 + 4096},
				{0, -4096},
				{0, -8192},
				{0, -16384},
			}
			// blueprints = [][]int{
			// 	{5},
			// 	{1, 4, 1, 32},
			// 	{2, 4, 1024, 2048},
			// 	{3, 8, 4096, 8192 - 2, 8192 - 2 + 4096, 16384 - 32 - 32, 16384 - 32 - 32 + 4096, 16384 + 8192 - 32 - 32 - 2, 16384 + 8192 - 32 - 32 - 2 + 4096},
			// 	{0, -4096},
			// 	{0, -8192},
			// 	{0, -16384},
			// }
			// blueprints = [][]int{
			// 	{5},
			// 	{1, 8, 1, 32, 1024},
			// 	{2, 2, 2048},
			// 	{3, 8, 4096, 8192 - 2, 8192 - 2 + 4096, 16384 - 32 - 32, 16384 - 32 - 32 + 4096, 16384 + 8192 - 32 - 32 - 2, 16384 + 8192 - 32 - 32 - 2 + 4096},
			// 	{0, -4096},
			// 	{0, -8192},
			// 	{0, -16384},
			// }
		} else if depth == 4 {
			// blueprints = [][]int{
			// 	{8},
			// 	{1, 2, 1},
			// 	{1, 4, 32, 1024},
			// 	{0, 4096},
			// 	{2, 2, 2048},
			// 	{3, 4, 8192 - 2, 16384 - 32 - 32, 16384 + 8192 - 32 - 32 - 2},
			// 	{0, -4096},
			// 	{0, -8192},
			// 	{0, -16384},
			// }
			// blueprints = [][]int{
			// 	{8},
			// 	{1, 4, 1, 32},
			// 	{1, 2, 1024},
			// 	{0, 4096},
			// 	{2, 2, 2048},
			// 	{3, 4, 8192 - 2, 16384 - 32 - 32, 16384 + 8192 - 32 - 32 - 2},
			// 	{0, -4096},
			// 	{0, -8192},
			// 	{0, -16384},
			// }
			blueprints = [][]int{
				{8},
				{1, 2, 1},
				{1, 2, 32},
				{0, 4096},
				{2, 4, 1024, 2048},
				{3, 4, 8192 - 2, 16384 - 32 - 32, 16384 + 8192 - 32 - 32 - 2},
				{0, -4096},
				{0, -8192},
				{0, -16384},
			}
			// blueprints = [][]int{
			// 	{8},
			// 	{1, 2, 1},
			// 	{1, 4, 32, 1024},
			// 	{2, 2, 2048},
			// 	{3, 8, 4096, 8192 - 2, 8192 - 2 + 4096, 16384 - 32 - 32, 16384 - 32 - 32 + 4096, 16384 + 8192 - 32 - 32 - 2, 16384 + 8192 - 32 - 32 - 2 + 4096},
			// 	{0, -4096},
			// 	{0, -8192},
			// 	{0, -16384},
			// }
			// blueprints = [][]int{
			// 	{8},
			// 	{1, 4, 1, 32},
			// 	{1, 2, 1024},
			// 	{2, 2, 2048},
			// 	{3, 8, 4096, 8192 - 2, 8192 - 2 + 4096, 16384 - 32 - 32, 16384 - 32 - 32 + 4096, 16384 + 8192 - 32 - 32 - 2, 16384 + 8192 - 32 - 32 - 2 + 4096},
			// 	{0, -4096},
			// 	{0, -8192},
			// 	{0, -16384},
			// }
			// blueprints = [][]int{
			// 	{8},
			// 	{1, 2, 1},
			// 	{1, 2, 32},
			// 	{2, 4, 1024, 2048},
			// 	{3, 8, 4096, 8192 - 2, 8192 - 2 + 4096, 16384 - 32 - 32, 16384 - 32 - 32 + 4096, 16384 + 8192 - 32 - 32 - 2, 16384 + 8192 - 32 - 32 - 2 + 4096},
			// 	{0, -4096},
			// 	{0, -8192},
			// 	{0, -16384},
			// }
		} else if depth == 5 {
			//5 depth, 46 rotation
			blueprints = [][]int{
				{9},
				{1, 2, 1},
				{1, 2, 32},
				{1, 2, 1024},
				{0, 4096},
				{2, 2, 2048},
				{3, 4, 8192 - 2, 16384 - 32 - 32, 16384 + 8192 - 32 - 32 - 2},
				{0, -4096},
				{0, -8192},
				{0, -16384},
			}
		} else {
			fmt.Printf("RotOptConv : Invalid parameter! convID(%s), depth(%v)", convID, depth)

		}

		//============================================//
		q = 16
		rotIndex3by3Kernel = []int{-66, -64, -62, -2, 0, 2, 62, 64, 66}

		//========================================================================================//
	} else if convID == "CONV4" { //8*8*64 -> 8*8*64, kernel=3*3, k=4
		//CONV4
		//=================Choose MAP=================//
		if depth == 2 {
			blueprints = [][]int{
				{8},
				{0, 32 + 32},
				{0, 1024},
				{0, 2048},
				{2, 8, 1, 2, 32},
				{3, 8, 1024*4 - 64, 1024 * 7, 1024*11 - 64, 1024 * 14, 1024*18 - 64, 1024 * 21, 1024*25 - 64},
				{0, -4096},
				{0, -8192},
				{0, -16384},
			}
		} else if depth == 3 {
			blueprints = [][]int{
				{9},
				{1, 4, 1, 2},
				{0, 32 + 32},
				{0, 1024},
				{0, 2048},
				{2, 2, 32},
				{3, 8, 1024*4 - 64, 1024 * 7, 1024*11 - 64, 1024 * 14, 1024*18 - 64, 1024 * 21, 1024*25 - 64},
				{0, -4096},
				{0, -8192},
				{0, -16384},
			}
			// blueprints = [][]int{
			// 	{9},
			// 	{1, 2, 1},
			// 	{0, 32 + 32},
			// 	{0, 1024},
			// 	{0, 2048},
			// 	{2, 4, 2, 32},
			// 	{3, 8, 1024*4 - 64, 1024 * 7, 1024*11 - 64, 1024 * 14, 1024*18 - 64, 1024 * 21, 1024*25 - 64},
			// 	{0, -4096},
			// 	{0, -8192},
			// 	{0, -16384},
			// }
		} else if depth == 4 {
			blueprints = [][]int{
				{10},
				{1, 2, 1},
				{1, 2, 2},
				{0, 32 + 32},
				{0, 1024},
				{0, 2048},
				{2, 2, 32},
				{3, 8, 1024*4 - 64, 1024 * 7, 1024*11 - 64, 1024 * 14, 1024*18 - 64, 1024 * 21, 1024*25 - 64},
				{0, -4096},
				{0, -8192},
				{0, -16384},
			}
		} else {
			fmt.Printf("RotOptConv : Invalid parameter! convID(%s), depth(%v)", convID, depth)

		}
		//============================================//

		q = 8
		rotIndex3by3Kernel = []int{-132, -128, -124, -4, 0, 4, 124, 128, 132}
		////////////개발필요 맨 아래 conv feature 도 개발!!!
	} else if convID == "CvTCifar100Stage2" { //8*8*64 -> 4*4*192, kernel=3*3 (192->256), k=1
		//CvTCifar100Stage2
		//=================Choose MAP=================//
		if depth == 2 {
			blueprints = [][]int{
				{4},
				{0, 2048},
				{2, 32, 64, 128, 256, 512, 1024},
				{3, 8, 4096 - 1, 4096*2 - 8, 4096*3 - 8 - 1, 16384 - 4*4*96},
				{0, -8192},
				{0, -16384},
			}
		} else if depth == 3 {
			blueprints = [][]int{
				{5},
				{1, 4, 1024, 2048},
				{2, 4, 4096, 8192},
				{3, 4, 8192 - 1, 16384 - 32, 16384 + 8192 - 32 - 1},
				{0, -8192},
				{0, -16384},
			}
			// blueprints = [][]int{
			// 	{5},
			// 	{1, 2, 1024},
			// 	{2, 8, 2048, 4096, 8192},
			// 	{3, 4, 8192 - 1, 16384 - 32, 16384 + 8192 - 32 - 1},
			// 	{0, -8192},
			// 	{0, -16384},
			// }
			// blueprints = [][]int{
			// 	{5},
			// 	{1, 8, 1024, 2048, 4096},
			// 	{2, 2, 8192},
			// 	{3, 4, 8192 - 1, 16384 - 32, 16384 + 8192 - 32 - 1},
			// 	{0, -8192},
			// 	{0, -16384},
			// }
		} else if depth == 4 {
			blueprints = [][]int{
				{6},
				{1, 2, 1024},
				{1, 2, 2048},
				{2, 4, 4096, 8192},
				{3, 4, 8192 - 1, 16384 - 32, 16384 + 8192 - 32 - 1},
				{0, -8192},
				{0, -16384},
			}
			// blueprints = [][]int{
			// 	{6},
			// 	{1, 4, 1024, 2048},
			// 	{1, 2, 4096},
			// 	{2, 2, 8192},
			// 	{3, 4, 8192 - 1, 16384 - 32, 16384 + 8192 - 32 - 1},
			// 	{0, -8192},
			// 	{0, -16384},
			// }
		} else if depth == 5 {
			//5 depth, 43 rotation,
			blueprints = [][]int{
				{7},
				{1, 2, 1024},
				{1, 2, 2048},
				{1, 2, 4096},
				{2, 2, 8192},
				{3, 4, 8192 - 1, 16384 - 32, 16384 + 8192 - 32 - 1},
				{0, -8192},
				{0, -16384},
			}
		} else {
			fmt.Printf("RotOptConv : Invalid parameter! convID(%s), depth(%v)", convID, depth)

		}
		//============================================//

		q = 24
		rotIndex3by3Kernel = []int{-9, -8, -7, -1, 0, 1, 7, 8, 9}
	} else if convID == "CvTCifar100Stage3" { //4*4*192 -> 2*2*384, kernel=3*3 (192->256, 384->512), k=1
		//CvTCifar100Stage3
		//=================Choose MAP=================//
		if depth == 2 {
			blueprints = [][]int{
				{8},
				{0, 32 + 32},
				{0, 1024},
				{0, 2048},
				{2, 8, 1, 2, 32},
				{3, 8, 1024*4 - 64, 1024 * 7, 1024*11 - 64, 1024 * 14, 1024*18 - 64, 1024 * 21, 1024*25 - 64},
				{0, -4096},
				{0, -8192},
				{0, -16384},
			}
		} else if depth == 3 {
			blueprints = [][]int{
				{9},
				{1, 4, 1, 2},
				{0, 32 + 32},
				{0, 1024},
				{0, 2048},
				{2, 2, 32},
				{3, 8, 1024*4 - 64, 1024 * 7, 1024*11 - 64, 1024 * 14, 1024*18 - 64, 1024 * 21, 1024*25 - 64},
				{0, -4096},
				{0, -8192},
				{0, -16384},
			}
		} else if depth == 4 {
			blueprints = [][]int{
				{10},
				{1, 2, 1},
				{1, 2, 2},
				{0, 32 + 32},
				{0, 1024},
				{0, 2048},
				{2, 2, 32},
				{3, 8, 1024*4 - 64, 1024 * 7, 1024*11 - 64, 1024 * 14, 1024*18 - 64, 1024 * 21, 1024*25 - 64},
				{0, -4096},
				{0, -8192},
				{0, -16384},
			}
		} else {
			fmt.Printf("RotOptConv : Invalid parameter! convID(%s), depth(%v)", convID, depth)
		}
		//============================================//

		q = 8
		rotIndex3by3Kernel = []int{-18, -16, -14, -2, 0, 2, 14, 16, 18}
	} else if convID == "MUSE_PyramidGenConv" { //8*8*512 -> 8*8*512, kernel=3*3, k=1 //param set to PN15QP880CI
		//MUSE_PyramidGenConv
		//=================Choose MAP=================//
		if depth == 2 {
			/*rot num:  4616
			2 30.154353784
			3 39.104911806
			*/
			blueprints = [][]int{ // optimal
				{2},
				{2, 512, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384},
				{3, 1},
			}
			// blueprints = [][]int{ // x=1. 생각좀 해보자! 이거 안되나?? p_o 가 아니고 2^x p_o 인가!???
			// 	{3},
			// 	{2, 512, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384},
			// 	{3, 1},
			// }

		} else if depth == 3 {
			/*3 20.930329175
			4 25.906355157 */
			// blueprints = [][]int{ //
			// 	{3},
			// 	{1, 2, 64},
			// 	{2, 256, 128, 256, 512, 1024, 2048, 4096, 8192, 16384},
			// 	{3, 1},
			// }

			/*3 17.278701302
			4 23.440515896
			rot num:  1928*/
			blueprints = [][]int{ // optimal
				{3},
				{1, 4, 64, 128},
				{2, 128, 256, 512, 1024, 2048, 4096, 8192, 16384},
				{3, 1},
			}

			/*rot num:  1928
			3 17.761298181
			4 27.081396548  */
			// blueprints = [][]int{ //
			// 	{3},
			// 	{1, 8, 64, 128, 256},
			// 	{2, 64, 512, 1024, 2048, 4096, 8192, 16384},
			// 	{3, 1},
			// }

			/*3 20.049036016
			4 29.682939791 */
			// blueprints = [][]int{ //
			// 	{3},
			// 	{1, 16, 64, 128, 256, 512},
			// 	{2, 32, 1024, 2048, 4096, 8192, 16384},
			// 	{3, 1},
			// }

		} else if depth == 4 {
			/*rot num:  1672
			4 20.389629573
			5 24.07607359  */
			// blueprints = [][]int{ //
			// 	{4},
			// 	{1, 2, 64},
			// 	{1, 2, 128},
			// 	{2, 128, 256, 512, 1024, 2048, 4096, 8192, 16384},
			// 	{3, 1},
			// }

			/*rot num:  1416
			4 19.824842517
			5 23.020085434 */
			blueprints = [][]int{ // optimal
				{4},
				{1, 2, 64},
				{1, 4, 128, 256},
				{2, 64, 512, 1024, 2048, 4096, 8192, 16384},
				{3, 1},
			}

			/*4 21.962343029
			5 26.159740812 */
			// blueprints = [][]int{ //
			// 	{4},
			// 	{1, 4, 64, 128},
			// 	{1, 2, 256},
			// 	{2, 64, 512, 1024, 2048, 4096, 8192, 16384},
			// 	{3, 1},
			// }

			/*rot num:  1448
			4 18.421667511
			rot num:  1448
			5 25.722532104 */
			// blueprints = [][]int{ //
			// 	{4},
			// 	{1, 2, 64}, //512
			// 	{1, 8, 128, 256, 512}, //(512/2)*3
			// 	{2, 32, 1024, 2048, 4096, 8192, 16384}, //(512/16)*5
			// 	{3, 1},
			// }

			/*rot num:  1448
			4 20.60111984
			rot num:  1448
			5 25.919169026 */
			// blueprints = [][]int{ //
			// 	{4},
			// 	{1, 4, 64, 128},                        //512*2
			// 	{1, 4, 256, 512},                       //(512/4)*2
			// 	{2, 32, 1024, 2048, 4096, 8192, 16384}, //(512/16)*5
			// 	{3, 1},
			// }

			/*rot num:  1768
			4 25.757405713
			5 30.488909164 */
			// blueprints = [][]int{ //
			// 	{4},
			// 	{1, 8, 64, 128, 256},
			// 	{1, 2, 512},
			// 	{2, 32, 1024, 2048, 4096, 8192, 16384},
			// 	{3, 1},
			// }

		} else if depth == 5 {
			/*rot num:  1288
			5 21.766110939
			6 23.387935274 */
			// blueprints = [][]int{ //
			// 	{5},
			// 	{1, 2, 64},
			// 	{1, 2, 128},
			// 	{1, 2, 256},
			// 	{2, 64, 512, 1024, 2048, 4096, 8192, 16384},
			// 	{3, 1},
			// }

			/*rot num:  1192
			5 21.571386205
			6 25.624208281 */
			blueprints = [][]int{ //optimal
				{5},
				{1, 2, 64},
				{1, 2, 128},
				{1, 4, 256, 512},
				{2, 32, 1024, 2048, 4096, 8192, 16384},
				{3, 1},
			}
		} else if depth == 6 {
			/*6 23.630946626
			7 27.225248069 */
			// blueprints = [][]int{ //
			// 	{6},
			// 	{1, 2, 64},
			// 	{1, 2, 128},
			// 	{1, 2, 256},
			// 	{1, 2, 512},
			// 	{2, 32, 1024, 2048, 4096, 8192, 16384},
			// 	{3, 1},
			// }

			blueprints = [][]int{ // maybe optimal
				{6},
				{1, 2, 64},
				{1, 2, 128},
				{1, 2, 256},
				{1, 4, 512, 1024},
				{2, 16, 2048, 4096, 8192, 16384},
				{3, 1},
			}
		} else if depth == 7 {

			// blueprints = [][]int{ //
			// 	{7},
			// 	{1, 2, 64},
			// 	{1, 2, 128},
			// 	{1, 2, 256},
			// 	{1, 2, 512},
			// 	{1, 2, 1024},
			// 	{2, 16, 2048, 4096, 8192, 16384},
			// 	{3, 1},
			// }
			/*7 27.503618194
			8 30.555681897*/
			blueprints = [][]int{ //maybe optimal
				{7},
				{1, 2, 64},
				{1, 2, 128},
				{1, 2, 256},
				{1, 2, 512},
				{1, 4, 1024, 2048},
				{2, 8, 4096, 8192, 16384},
				{3, 1},
			}
		} else if depth == 8 {
			/*8 33.128208555
			9 34.972406424 */
			// blueprints = [][]int{ //
			// 	{8},
			// 	{1, 2, 64},
			// 	{1, 2, 128},
			// 	{1, 2, 256},
			// 	{1, 2, 512},
			// 	{1, 2, 1024},
			// 	{1, 2, 2048},
			// 	{2, 8, 4096, 8192, 16384},
			// 	{3, 1},
			// }

			blueprints = [][]int{ //maybe optimal
				{8},
				{1, 2, 64},
				{1, 2, 128},
				{1, 2, 256},
				{1, 2, 512},
				{1, 2, 1024},
				{1, 4, 2048, 4096},
				{2, 4, 8192, 16384},
				{3, 1},
			}
		} else if depth == 9 {
			/*9 36.716598031
			10 40.788898526 */
			blueprints = [][]int{ //optimal
				{9},
				{1, 2, 64},
				{1, 2, 128},
				{1, 2, 256},
				{1, 2, 512},
				{1, 2, 1024},
				{1, 2, 2048},
				{1, 2, 4096},
				{2, 4, 8192, 16384},
				{3, 1},
			}
		} else if depth == 10 {
			/*10 43.982573476
			11 45.700869477 */
			blueprints = [][]int{ //optimal
				{9},
				{1, 2, 64},
				{1, 2, 128},
				{1, 2, 256},
				{1, 2, 512},
				{1, 2, 1024},
				{1, 2, 2048},
				{1, 2, 4096},
				{1, 2, 8192},
				{2, 2, 16384},
				{3, 1},
			}
		} else {
			fmt.Printf("RotOptConv : Invalid parameter! convID(%s), depth(%v)", convID, depth)
		}
		//============================================//

		q = 512
		rotIndex3by3Kernel = []int{-9, -8, -7, -1, 0, 1, 7, 8, 9}
	}
	return blueprints, q, rotIndex3by3Kernel
}

func GetRotOptConvFeature(convID string) *ConvFeature {
	var result ConvFeature
	// rot -> filter -> add
	if convID == "CONV1" { //32*32*3 -> 32*32*16, kernel=3*3, k=1
		result.ConvID = "CONV1"

		result.InputDataWidth = 32
		result.InputDataHeight = 32
		result.InputDataChannel = 3
		result.KernelSize = 3
		result.KernelNumber = 16
		result.Stride = 1
		result.K = 1
		result.AfterK = 1
		result.BeforeCopy = 8
		result.AfterCopy = 2
		result.q = 2

		result.KernelBP = [][]int{
			{0, 4, 8, 12, 2, 6, 10, 14},
			{1, 5, 9, 13, 3, 7, 11, 15},
		}

	} else if convID == "CONV2" { //32*32*16 -> 32*32*16, kernel=3*3, k=1
		result.ConvID = "CONV2"

		result.InputDataWidth = 32
		result.InputDataHeight = 32
		result.InputDataChannel = 16
		result.KernelSize = 3
		result.KernelNumber = 16
		result.Stride = 1
		result.K = 1
		result.AfterK = 1
		result.BeforeCopy = 2
		result.AfterCopy = 2

		result.q = 8

		result.KernelBP = [][]int{
			{0, 8}, {1, 9}, {2, 10}, {3, 11}, {4, 12}, {5, 13}, {6, 14}, {7, 15},
		}

	} else if convID == "CONV3s2" { //32*32*16 -> 16*16*32, kernel=3*3, k=1->2
		result.ConvID = "CONV3s2"

		result.InputDataWidth = 32
		result.InputDataHeight = 32
		result.InputDataChannel = 16
		result.KernelSize = 3
		result.KernelNumber = 32
		result.Stride = 2
		result.K = 1
		result.AfterK = 2
		result.BeforeCopy = 2
		result.AfterCopy = 4

		result.KernelBP = [][]int{
			{0, 2}, {4, 6}, {8, 10}, {12, 14}, {16, 18}, {20, 22}, {24, 26}, {28, 30},
			{1, 3}, {5, 7}, {9, 11}, {13, 15}, {17, 19}, {21, 23}, {25, 27}, {29, 31},
		}
		result.q = 16

	} else if convID == "CONV3" { //16*16*32 -> 16*16*32, kernel=3*3, k=2
		result.ConvID = "CONV3"

		result.InputDataWidth = 16
		result.InputDataHeight = 16
		result.InputDataChannel = 32
		result.KernelSize = 3
		result.KernelNumber = 32
		result.Stride = 1
		result.K = 2
		result.AfterK = 2
		result.BeforeCopy = 4
		result.AfterCopy = 4

		result.KernelBP = [][]int{
			{0, 8, 16, 24}, {1, 9, 17, 25}, {2, 10, 18, 26}, {3, 11, 19, 27},
			{4, 12, 20, 28}, {5, 13, 21, 29}, {6, 14, 22, 30}, {7, 15, 23, 31},
		}
		result.q = 8

	} else if convID == "CONV4s2" { //16*16*32 -> 8*8*64, kernel=3*3, k=2->4
		result.ConvID = "CONV4s2"

		result.InputDataWidth = 16
		result.InputDataHeight = 16
		result.InputDataChannel = 32
		result.KernelSize = 3
		result.KernelNumber = 64
		result.Stride = 2
		result.K = 2
		result.AfterK = 4
		result.BeforeCopy = 4
		result.AfterCopy = 8

		result.KernelBP = [][]int{
			{0, 2, 8, 10}, {1, 3, 9, 11}, {4, 6, 12, 14}, {5, 7, 13, 15},
			{16, 18, 24, 26}, {17, 19, 25, 27}, {20, 22, 28, 30}, {21, 23, 29, 31},
			{32, 34, 40, 42}, {33, 35, 41, 43}, {36, 38, 44, 46}, {37, 39, 45, 47},
			{48, 50, 56, 58}, {49, 51, 57, 59}, {52, 54, 60, 62}, {53, 55, 61, 63},
		}

		result.q = 16

	} else if convID == "CONV4" { //8*8*64 -> 8*8*64, kernel=3*3, k=4
		result.ConvID = "CONV4"

		result.InputDataWidth = 8
		result.InputDataHeight = 8
		result.InputDataChannel = 64
		result.KernelSize = 3
		result.KernelNumber = 64
		result.Stride = 1
		result.K = 4
		result.AfterK = 4
		result.BeforeCopy = 8
		result.AfterCopy = 8

		// result.kernelMap = {
		//     {0,16,32,48,8,24,40,56},{1,17,33,49,9,25,41,57},{2,18,34,50,10,26,42,58},{3,19,35,51,11,27,43,59},
		//     {4,20,36,52,12,28,44,60},{5,21,37,53,13,29,45,61},{6,22,38,54,14,30,46,62},{7,23,39,55,15,31,47,63}
		// };
		result.KernelBP = [][]int{
			{0, 8, 16, 24, 32, 40, 48, 56}, {1, 9, 17, 25, 33, 41, 49, 57}, {2, 10, 18, 26, 34, 42, 50, 58}, {3, 11, 19, 27, 35, 43, 51, 59},
			{4, 12, 20, 28, 36, 44, 52, 60}, {5, 13, 21, 29, 37, 45, 53, 61}, {6, 14, 22, 30, 38, 46, 54, 62}, {7, 15, 23, 31, 39, 47, 55, 63},
		}

		result.q = 8

	} else if convID == "CvTCifar100Stage2" { //8*8*64 -> 4*4*192, kernel=3*3
		result.ConvID = "CvTCifar100Stage2"

		result.InputDataWidth = 8
		result.InputDataHeight = 8
		result.InputDataChannel = 64
		result.KernelSize = 3
		result.KernelNumber = 192
		result.Stride = 2
		result.K = 1
		result.AfterK = 2
		result.BeforeCopy = 8
		result.AfterCopy = 8

		result.KernelBP = [][]int{
			{0, 1, 2, 3, 4, 5, 6, 7},
			{8, 9, 10, 11, 12, 13, 14, 15},
			{16, 17, 18, 19, 20, 21, 22, 23},
			{24, 25, 26, 27, 28, 29, 30, 31},
			{32, 33, 34, 35, 36, 37, 38, 39},
			{40, 41, 42, 43, 44, 45, 46, 47},
			{48, 49, 50, 51, 52, 53, 54, 55},
			{56, 57, 58, 59, 60, 61, 62, 63},
			{64, 65, 66, 67, 68, 69, 70, 71},
			{72, 73, 74, 75, 76, 77, 78, 79},
			{80, 81, 82, 83, 84, 85, 86, 87},
			{88, 89, 90, 91, 92, 93, 94, 95},
			{96, 97, 98, 99, 100, 101, 102, 103},
			{104, 105, 106, 107, 108, 109, 110, 111},
			{112, 113, 114, 115, 116, 117, 118, 119},
			{120, 121, 122, 123, 124, 125, 126, 127},
			{128, 129, 130, 131, 132, 133, 134, 135},
			{136, 137, 138, 139, 140, 141, 142, 143},
			{144, 145, 146, 147, 148, 149, 150, 151},
			{152, 153, 154, 155, 156, 157, 158, 159},
			{160, 161, 162, 163, 164, 165, 166, 167},
			{168, 169, 170, 171, 172, 173, 174, 175},
			{176, 177, 178, 179, 180, 181, 182, 183},
			{184, 185, 186, 187, 188, 189, 190, 191},
		}

		result.q = 24

	} else if convID == "CvTCifar100Stage3" { //4*4*192 -> 2*2*384, kernel=3*3
		result.ConvID = "CvTCifar100Stage3"

		result.InputDataWidth = 4
		result.InputDataHeight = 4
		result.InputDataChannel = 192
		result.KernelSize = 3
		result.KernelNumber = 384
		result.Stride = 2
		result.K = 2
		result.AfterK = 4
		result.BeforeCopy = 8
		result.AfterCopy = 16

		result.KernelBP = [][]int{
			{0, 1, 2, 3, 4, 5, 6, 7},
			{8, 9, 10, 11, 12, 13, 14, 15},
			{16, 17, 18, 19, 20, 21, 22, 23},
			{24, 25, 26, 27, 28, 29, 30, 31},
			{32, 33, 34, 35, 36, 37, 38, 39},
			{40, 41, 42, 43, 44, 45, 46, 47},
			{48, 49, 50, 51, 52, 53, 54, 55},
			{56, 57, 58, 59, 60, 61, 62, 63},
			{64, 65, 66, 67, 68, 69, 70, 71},
			{72, 73, 74, 75, 76, 77, 78, 79},
			{80, 81, 82, 83, 84, 85, 86, 87},
			{88, 89, 90, 91, 92, 93, 94, 95},
			{96, 97, 98, 99, 100, 101, 102, 103},
			{104, 105, 106, 107, 108, 109, 110, 111},
			{112, 113, 114, 115, 116, 117, 118, 119},
			{120, 121, 122, 123, 124, 125, 126, 127},
			{128, 129, 130, 131, 132, 133, 134, 135},
			{136, 137, 138, 139, 140, 141, 142, 143},
			{144, 145, 146, 147, 148, 149, 150, 151},
			{152, 153, 154, 155, 156, 157, 158, 159},
			{160, 161, 162, 163, 164, 165, 166, 167},
			{168, 169, 170, 171, 172, 173, 174, 175},
			{176, 177, 178, 179, 180, 181, 182, 183},
			{184, 185, 186, 187, 188, 189, 190, 191},
			{192, 193, 194, 195, 196, 197, 198, 199},
			{200, 201, 202, 203, 204, 205, 206, 207},
			{208, 209, 210, 211, 212, 213, 214, 215},
			{216, 217, 218, 219, 220, 221, 222, 223},
			{224, 225, 226, 227, 228, 229, 230, 231},
			{232, 233, 234, 235, 236, 237, 238, 239},
			{240, 241, 242, 243, 244, 245, 246, 247},
			{248, 249, 250, 251, 252, 253, 254, 255},
			{256, 257, 258, 259, 260, 261, 262, 263},
			{264, 265, 266, 267, 268, 269, 270, 271},
			{272, 273, 274, 275, 276, 277, 278, 279},
			{280, 281, 282, 283, 284, 285, 286, 287},
			{288, 289, 290, 291, 292, 293, 294, 295},
			{296, 297, 298, 299, 300, 301, 302, 303},
			{304, 305, 306, 307, 308, 309, 310, 311},
			{312, 313, 314, 315, 316, 317, 318, 319},
			{320, 321, 322, 323, 324, 325, 326, 327},
			{328, 329, 330, 331, 332, 333, 334, 335},
			{336, 337, 338, 339, 340, 341, 342, 343},
			{344, 345, 346, 347, 348, 349, 350, 351},
			{352, 353, 354, 355, 356, 357, 358, 359},
			{360, 361, 362, 363, 364, 365, 366, 367},
			{368, 369, 370, 371, 372, 373, 374, 375},
			{376, 377, 378, 379, 380, 381, 382, 383},
		}

		result.q = 48

	} else if convID == "MUSE_PyramidGenConv" { //7*7*512 -> 7*7*512, kernel=3*3,
		result.ConvID = "MUSE_PyramidGenConv"

		result.InputDataWidth = 8 // make power of 2
		result.InputDataHeight = 8
		result.InputDataChannel = 512
		result.KernelSize = 3
		result.KernelNumber = 512
		result.Stride = 1
		result.K = 1
		result.AfterK = 1
		result.BeforeCopy = 1
		result.AfterCopy = 1

		result.KernelBP = [][]int{
			{0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15},
			{16}, {17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28}, {29}, {30}, {31},
			{32}, {33}, {34}, {35}, {36}, {37}, {38}, {39}, {40}, {41}, {42}, {43}, {44}, {45}, {46}, {47},
			{48}, {49}, {50}, {51}, {52}, {53}, {54}, {55}, {56}, {57}, {58}, {59}, {60}, {61}, {62}, {63},
			{64}, {65}, {66}, {67}, {68}, {69}, {70}, {71}, {72}, {73}, {74}, {75}, {76}, {77}, {78}, {79},
			{80}, {81}, {82}, {83}, {84}, {85}, {86}, {87}, {88}, {89}, {90}, {91}, {92}, {93}, {94}, {95},
			{96}, {97}, {98}, {99}, {100}, {101}, {102}, {103}, {104}, {105}, {106}, {107}, {108}, {109}, {110}, {111},
			{112}, {113}, {114}, {115}, {116}, {117}, {118}, {119}, {120}, {121}, {122}, {123}, {124}, {125}, {126}, {127},
			{128}, {129}, {130}, {131}, {132}, {133}, {134}, {135}, {136}, {137}, {138}, {139}, {140}, {141}, {142}, {143},
			{144}, {145}, {146}, {147}, {148}, {149}, {150}, {151}, {152}, {153}, {154}, {155}, {156}, {157}, {158}, {159},
			{160}, {161}, {162}, {163}, {164}, {165}, {166}, {167}, {168}, {169}, {170}, {171}, {172}, {173}, {174}, {175},
			{176}, {177}, {178}, {179}, {180}, {181}, {182}, {183}, {184}, {185}, {186}, {187}, {188}, {189}, {190}, {191},
			{192}, {193}, {194}, {195}, {196}, {197}, {198}, {199}, {200}, {201}, {202}, {203}, {204}, {205}, {206}, {207},
			{208}, {209}, {210}, {211}, {212}, {213}, {214}, {215}, {216}, {217}, {218}, {219}, {220}, {221}, {222}, {223},
			{224}, {225}, {226}, {227}, {228}, {229}, {230}, {231}, {232}, {233}, {234}, {235}, {236}, {237}, {238}, {239},
			{240}, {241}, {242}, {243}, {244}, {245}, {246}, {247}, {248}, {249}, {250}, {251}, {252}, {253}, {254}, {255},
			{256}, {257}, {258}, {259}, {260}, {261}, {262}, {263}, {264}, {265}, {266}, {267}, {268}, {269}, {270}, {271},
			{272}, {273}, {274}, {275}, {276}, {277}, {278}, {279}, {280}, {281}, {282}, {283}, {284}, {285}, {286}, {287},
			{288}, {289}, {290}, {291}, {292}, {293}, {294}, {295}, {296}, {297}, {298}, {299}, {300}, {301}, {302}, {303},
			{304}, {305}, {306}, {307}, {308}, {309}, {310}, {311}, {312}, {313}, {314}, {315}, {316}, {317}, {318}, {319},
			{320}, {321}, {322}, {323}, {324}, {325}, {326}, {327}, {328}, {329}, {330}, {331}, {332}, {333}, {334}, {335},
			{336}, {337}, {338}, {339}, {340}, {341}, {342}, {343}, {344}, {345}, {346}, {347}, {348}, {349}, {350}, {351},
			{352}, {353}, {354}, {355}, {356}, {357}, {358}, {359}, {360}, {361}, {362}, {363}, {364}, {365}, {366}, {367},
			{368}, {369}, {370}, {371}, {372}, {373}, {374}, {375}, {376}, {377}, {378}, {379}, {380}, {381}, {382}, {383},
			{384}, {385}, {386}, {387}, {388}, {389}, {390}, {391}, {392}, {393}, {394}, {395}, {396}, {397}, {398}, {399},
			{400}, {401}, {402}, {403}, {404}, {405}, {406}, {407}, {408}, {409}, {410}, {411}, {412}, {413}, {414}, {415},
			{416}, {417}, {418}, {419}, {420}, {421}, {422}, {423}, {424}, {425}, {426}, {427}, {428}, {429}, {430}, {431},
			{432}, {433}, {434}, {435}, {436}, {437}, {438}, {439}, {440}, {441}, {442}, {443}, {444}, {445}, {446}, {447},
			{448}, {449}, {450}, {451}, {452}, {453}, {454}, {455}, {456}, {457}, {458}, {459}, {460}, {461}, {462}, {463},
			{464}, {465}, {466}, {467}, {468}, {469}, {470}, {471}, {472}, {473}, {474}, {475}, {476}, {477}, {478}, {479},
			{480}, {481}, {482}, {483}, {484}, {485}, {486}, {487}, {488}, {489}, {490}, {491}, {492}, {493}, {494}, {495},
			{496}, {497}, {498}, {499}, {500}, {501}, {502}, {503}, {504}, {505}, {506}, {507}, {508}, {509}, {510}, {511},
		}

		result.q = 512

	}

	return &result
}
func GetMulParConvFeature(convID string) *ConvFeature {
	var result ConvFeature
	if convID == "CONV1" { //32*32*3 -> 32*32*16, kernel=3*3, k=1
		result.ConvID = "CONV1"

		result.InputDataWidth = 32
		result.InputDataHeight = 32
		result.InputDataChannel = 3
		result.KernelSize = 3
		result.KernelNumber = 16
		result.Stride = 1
		result.K = 1
		result.AfterK = 1
		result.BeforeCopy = 8
		result.AfterCopy = 2
		result.q = 2

		result.KernelBP = [][]int{
			{0, 1, 2, 3, 4, 5, 6, 7},
			{8, 9, 10, 11, 12, 13, 14, 15},
		}

	} else if convID == "CONV2" { //32*32*16 -> 32*32*16, kernel=3*3, k=1
		result.ConvID = "CONV2"

		result.InputDataWidth = 32
		result.InputDataHeight = 32
		result.InputDataChannel = 16
		result.KernelSize = 3
		result.KernelNumber = 16
		result.Stride = 1
		result.K = 1
		result.AfterK = 1
		result.BeforeCopy = 2
		result.AfterCopy = 2

		result.q = 8

		result.KernelBP = [][]int{
			{0, 1}, {2, 3}, {4, 5}, {6, 7}, {8, 9}, {10, 11}, {12, 13}, {14, 15},
		}

	} else if convID == "CONV3s2" { //32*32*16 -> 16*16*32, kernel=3*3, k=1->2
		result.ConvID = "CONV3s2"

		result.InputDataWidth = 32
		result.InputDataHeight = 32
		result.InputDataChannel = 16
		result.KernelSize = 3
		result.KernelNumber = 32
		result.Stride = 2
		result.K = 1
		result.AfterK = 2
		result.BeforeCopy = 2
		result.AfterCopy = 4

		result.KernelBP = [][]int{
			{0, 1}, {2, 3}, {4, 5}, {6, 7}, {8, 9}, {10, 11}, {12, 13}, {14, 15},
			{16, 17}, {18, 19}, {20, 21}, {22, 23}, {24, 25}, {26, 27}, {28, 29}, {30, 31},
		}
		result.q = 16

	} else if convID == "CONV3" { //16*16*32 -> 16*16*32, kernel=3*3, k=2
		result.ConvID = "CONV3"

		result.InputDataWidth = 16
		result.InputDataHeight = 16
		result.InputDataChannel = 32
		result.KernelSize = 3
		result.KernelNumber = 32
		result.Stride = 1
		result.K = 2
		result.AfterK = 2
		result.BeforeCopy = 4
		result.AfterCopy = 4

		result.KernelBP = [][]int{
			{0, 1, 2, 3}, {4, 5, 6, 7}, {8, 9, 10, 11}, {12, 13, 14, 15},
			{16, 17, 18, 19}, {20, 21, 22, 23}, {24, 25, 26, 27}, {28, 29, 30, 31},
		}
		result.q = 8

	} else if convID == "CONV4s2" { //16*16*32 -> 8*8*64, kernel=3*3, k=2->4
		result.ConvID = "CONV4s2"

		result.InputDataWidth = 16
		result.InputDataHeight = 16
		result.InputDataChannel = 32
		result.KernelSize = 3
		result.KernelNumber = 64
		result.Stride = 2
		result.K = 2
		result.AfterK = 4
		result.BeforeCopy = 4
		result.AfterCopy = 8

		result.KernelBP = [][]int{
			{0, 1, 2, 3}, {4, 5, 6, 7}, {8, 9, 10, 11}, {12, 13, 14, 15},
			{16, 17, 18, 19}, {20, 21, 22, 23}, {24, 25, 26, 27}, {28, 29, 30, 31},
			{32, 33, 34, 35}, {36, 37, 38, 39}, {40, 41, 42, 43}, {44, 45, 46, 47},
			{48, 49, 50, 51}, {52, 53, 54, 55}, {56, 57, 58, 59}, {60, 61, 62, 63},
		}

		result.q = 16

	} else if convID == "CONV4" { //8*8*64 -> 8*8*64, kernel=3*3, k=4
		result.ConvID = "CONV4"

		result.InputDataWidth = 8
		result.InputDataHeight = 8
		result.InputDataChannel = 64
		result.KernelSize = 3
		result.KernelNumber = 64
		result.Stride = 1
		result.K = 4
		result.AfterK = 4
		result.BeforeCopy = 8
		result.AfterCopy = 8

		// result.kernelMap = {
		//     {0,16,32,48,8,24,40,56},{1,17,33,49,9,25,41,57},{2,18,34,50,10,26,42,58},{3,19,35,51,11,27,43,59},
		//     {4,20,36,52,12,28,44,60},{5,21,37,53,13,29,45,61},{6,22,38,54,14,30,46,62},{7,23,39,55,15,31,47,63}
		// };
		result.KernelBP = [][]int{
			{0, 1, 2, 3, 4, 5, 6, 7}, {8, 9, 10, 11, 12, 13, 14, 15}, {16, 17, 18, 19, 20, 21, 22, 23}, {24, 25, 26, 27, 28, 29, 30, 31},
			{32, 33, 34, 35, 36, 37, 38, 39}, {40, 41, 42, 43, 44, 45, 46, 47}, {48, 49, 50, 51, 52, 53, 54, 55}, {56, 57, 58, 59, 60, 61, 62, 63},
		}

		result.q = 8

	} else if convID == "CvTCifar100Stage2" { //8*8*64 -> 4*4*192, kernel=3*3
		result.ConvID = "CvTCifar100Stage2"

		result.InputDataWidth = 8
		result.InputDataHeight = 8
		result.InputDataChannel = 64
		result.KernelSize = 3
		result.KernelNumber = 192
		result.Stride = 2
		result.K = 1
		result.AfterK = 2
		result.BeforeCopy = 8
		result.AfterCopy = 8

		result.KernelBP = [][]int{
			{0, 1, 2, 3, 4, 5, 6, 7},
			{8, 9, 10, 11, 12, 13, 14, 15},
			{16, 17, 18, 19, 20, 21, 22, 23},
			{24, 25, 26, 27, 28, 29, 30, 31},
			{32, 33, 34, 35, 36, 37, 38, 39},
			{40, 41, 42, 43, 44, 45, 46, 47},
			{48, 49, 50, 51, 52, 53, 54, 55},
			{56, 57, 58, 59, 60, 61, 62, 63},
			{64, 65, 66, 67, 68, 69, 70, 71},
			{72, 73, 74, 75, 76, 77, 78, 79},
			{80, 81, 82, 83, 84, 85, 86, 87},
			{88, 89, 90, 91, 92, 93, 94, 95},
			{96, 97, 98, 99, 100, 101, 102, 103},
			{104, 105, 106, 107, 108, 109, 110, 111},
			{112, 113, 114, 115, 116, 117, 118, 119},
			{120, 121, 122, 123, 124, 125, 126, 127},
			{128, 129, 130, 131, 132, 133, 134, 135},
			{136, 137, 138, 139, 140, 141, 142, 143},
			{144, 145, 146, 147, 148, 149, 150, 151},
			{152, 153, 154, 155, 156, 157, 158, 159},
			{160, 161, 162, 163, 164, 165, 166, 167},
			{168, 169, 170, 171, 172, 173, 174, 175},
			{176, 177, 178, 179, 180, 181, 182, 183},
			{184, 185, 186, 187, 188, 189, 190, 191},
		}

		result.q = 24

	} else if convID == "CvTCifar100Stage3" { //4*4*192 -> 2*2*384, kernel=3*3
		result.ConvID = "CvTCifar100Stage3"

		result.InputDataWidth = 4
		result.InputDataHeight = 4
		result.InputDataChannel = 192
		result.KernelSize = 3
		result.KernelNumber = 384
		result.Stride = 2
		result.K = 2
		result.AfterK = 4
		result.BeforeCopy = 8
		result.AfterCopy = 16

		result.KernelBP = [][]int{
			{0, 1, 2, 3, 4, 5, 6, 7},
			{8, 9, 10, 11, 12, 13, 14, 15},
			{16, 17, 18, 19, 20, 21, 22, 23},
			{24, 25, 26, 27, 28, 29, 30, 31},
			{32, 33, 34, 35, 36, 37, 38, 39},
			{40, 41, 42, 43, 44, 45, 46, 47},
			{48, 49, 50, 51, 52, 53, 54, 55},
			{56, 57, 58, 59, 60, 61, 62, 63},
			{64, 65, 66, 67, 68, 69, 70, 71},
			{72, 73, 74, 75, 76, 77, 78, 79},
			{80, 81, 82, 83, 84, 85, 86, 87},
			{88, 89, 90, 91, 92, 93, 94, 95},
			{96, 97, 98, 99, 100, 101, 102, 103},
			{104, 105, 106, 107, 108, 109, 110, 111},
			{112, 113, 114, 115, 116, 117, 118, 119},
			{120, 121, 122, 123, 124, 125, 126, 127},
			{128, 129, 130, 131, 132, 133, 134, 135},
			{136, 137, 138, 139, 140, 141, 142, 143},
			{144, 145, 146, 147, 148, 149, 150, 151},
			{152, 153, 154, 155, 156, 157, 158, 159},
			{160, 161, 162, 163, 164, 165, 166, 167},
			{168, 169, 170, 171, 172, 173, 174, 175},
			{176, 177, 178, 179, 180, 181, 182, 183},
			{184, 185, 186, 187, 188, 189, 190, 191},
			{192, 193, 194, 195, 196, 197, 198, 199},
			{200, 201, 202, 203, 204, 205, 206, 207},
			{208, 209, 210, 211, 212, 213, 214, 215},
			{216, 217, 218, 219, 220, 221, 222, 223},
			{224, 225, 226, 227, 228, 229, 230, 231},
			{232, 233, 234, 235, 236, 237, 238, 239},
			{240, 241, 242, 243, 244, 245, 246, 247},
			{248, 249, 250, 251, 252, 253, 254, 255},
			{256, 257, 258, 259, 260, 261, 262, 263},
			{264, 265, 266, 267, 268, 269, 270, 271},
			{272, 273, 274, 275, 276, 277, 278, 279},
			{280, 281, 282, 283, 284, 285, 286, 287},
			{288, 289, 290, 291, 292, 293, 294, 295},
			{296, 297, 298, 299, 300, 301, 302, 303},
			{304, 305, 306, 307, 308, 309, 310, 311},
			{312, 313, 314, 315, 316, 317, 318, 319},
			{320, 321, 322, 323, 324, 325, 326, 327},
			{328, 329, 330, 331, 332, 333, 334, 335},
			{336, 337, 338, 339, 340, 341, 342, 343},
			{344, 345, 346, 347, 348, 349, 350, 351},
			{352, 353, 354, 355, 356, 357, 358, 359},
			{360, 361, 362, 363, 364, 365, 366, 367},
			{368, 369, 370, 371, 372, 373, 374, 375},
			{376, 377, 378, 379, 380, 381, 382, 383},
		}

		result.q = 48

	} else if convID == "MUSE_PyramidGenConv" { //7*7*512 -> 7*7*512, kernel=3*3,
		result.ConvID = "MUSE_PyramidGenConv"

		result.InputDataWidth = 8 // make power of 2
		result.InputDataHeight = 8
		result.InputDataChannel = 512
		result.KernelSize = 3
		result.KernelNumber = 512
		result.Stride = 1
		result.K = 1
		result.AfterK = 1
		result.BeforeCopy = 1
		result.AfterCopy = 1

		result.KernelBP = [][]int{
			{0}, {1}, {2}, {3}, {4}, {5}, {6}, {7}, {8}, {9}, {10}, {11}, {12}, {13}, {14}, {15},
			{16}, {17}, {18}, {19}, {20}, {21}, {22}, {23}, {24}, {25}, {26}, {27}, {28}, {29}, {30}, {31},
			{32}, {33}, {34}, {35}, {36}, {37}, {38}, {39}, {40}, {41}, {42}, {43}, {44}, {45}, {46}, {47},
			{48}, {49}, {50}, {51}, {52}, {53}, {54}, {55}, {56}, {57}, {58}, {59}, {60}, {61}, {62}, {63},
			{64}, {65}, {66}, {67}, {68}, {69}, {70}, {71}, {72}, {73}, {74}, {75}, {76}, {77}, {78}, {79},
			{80}, {81}, {82}, {83}, {84}, {85}, {86}, {87}, {88}, {89}, {90}, {91}, {92}, {93}, {94}, {95},
			{96}, {97}, {98}, {99}, {100}, {101}, {102}, {103}, {104}, {105}, {106}, {107}, {108}, {109}, {110}, {111},
			{112}, {113}, {114}, {115}, {116}, {117}, {118}, {119}, {120}, {121}, {122}, {123}, {124}, {125}, {126}, {127},
			{128}, {129}, {130}, {131}, {132}, {133}, {134}, {135}, {136}, {137}, {138}, {139}, {140}, {141}, {142}, {143},
			{144}, {145}, {146}, {147}, {148}, {149}, {150}, {151}, {152}, {153}, {154}, {155}, {156}, {157}, {158}, {159},
			{160}, {161}, {162}, {163}, {164}, {165}, {166}, {167}, {168}, {169}, {170}, {171}, {172}, {173}, {174}, {175},
			{176}, {177}, {178}, {179}, {180}, {181}, {182}, {183}, {184}, {185}, {186}, {187}, {188}, {189}, {190}, {191},
			{192}, {193}, {194}, {195}, {196}, {197}, {198}, {199}, {200}, {201}, {202}, {203}, {204}, {205}, {206}, {207},
			{208}, {209}, {210}, {211}, {212}, {213}, {214}, {215}, {216}, {217}, {218}, {219}, {220}, {221}, {222}, {223},
			{224}, {225}, {226}, {227}, {228}, {229}, {230}, {231}, {232}, {233}, {234}, {235}, {236}, {237}, {238}, {239},
			{240}, {241}, {242}, {243}, {244}, {245}, {246}, {247}, {248}, {249}, {250}, {251}, {252}, {253}, {254}, {255},
			{256}, {257}, {258}, {259}, {260}, {261}, {262}, {263}, {264}, {265}, {266}, {267}, {268}, {269}, {270}, {271},
			{272}, {273}, {274}, {275}, {276}, {277}, {278}, {279}, {280}, {281}, {282}, {283}, {284}, {285}, {286}, {287},
			{288}, {289}, {290}, {291}, {292}, {293}, {294}, {295}, {296}, {297}, {298}, {299}, {300}, {301}, {302}, {303},
			{304}, {305}, {306}, {307}, {308}, {309}, {310}, {311}, {312}, {313}, {314}, {315}, {316}, {317}, {318}, {319},
			{320}, {321}, {322}, {323}, {324}, {325}, {326}, {327}, {328}, {329}, {330}, {331}, {332}, {333}, {334}, {335},
			{336}, {337}, {338}, {339}, {340}, {341}, {342}, {343}, {344}, {345}, {346}, {347}, {348}, {349}, {350}, {351},
			{352}, {353}, {354}, {355}, {356}, {357}, {358}, {359}, {360}, {361}, {362}, {363}, {364}, {365}, {366}, {367},
			{368}, {369}, {370}, {371}, {372}, {373}, {374}, {375}, {376}, {377}, {378}, {379}, {380}, {381}, {382}, {383},
			{384}, {385}, {386}, {387}, {388}, {389}, {390}, {391}, {392}, {393}, {394}, {395}, {396}, {397}, {398}, {399},
			{400}, {401}, {402}, {403}, {404}, {405}, {406}, {407}, {408}, {409}, {410}, {411}, {412}, {413}, {414}, {415},
			{416}, {417}, {418}, {419}, {420}, {421}, {422}, {423}, {424}, {425}, {426}, {427}, {428}, {429}, {430}, {431},
			{432}, {433}, {434}, {435}, {436}, {437}, {438}, {439}, {440}, {441}, {442}, {443}, {444}, {445}, {446}, {447},
			{448}, {449}, {450}, {451}, {452}, {453}, {454}, {455}, {456}, {457}, {458}, {459}, {460}, {461}, {462}, {463},
			{464}, {465}, {466}, {467}, {468}, {469}, {470}, {471}, {472}, {473}, {474}, {475}, {476}, {477}, {478}, {479},
			{480}, {481}, {482}, {483}, {484}, {485}, {486}, {487}, {488}, {489}, {490}, {491}, {492}, {493}, {494}, {495},
			{496}, {497}, {498}, {499}, {500}, {501}, {502}, {503}, {504}, {505}, {506}, {507}, {508}, {509}, {510}, {511},
		}

		result.q = 512

	}

	return &result
}

type ConvFeature struct {
	ConvID           string
	InputDataWidth   int
	InputDataHeight  int
	InputDataChannel int
	KernelSize       int
	KernelNumber     int
	Stride           int
	K                int
	AfterK           int
	BeforeCopy       int
	AfterCopy        int
	KernelBP         [][]int
	q                int
}
